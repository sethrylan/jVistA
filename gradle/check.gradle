allprojects {
    // Checkstyle
    // adapted from https://gist.github.com/skhatri/1896321
    apply plugin: 'checkstyle'

    checkstyle {
        ignoreFailures = true
    }

    checkstyleMain {
        reports {
            include ( '**/*.java')
            xml {
                destination "${project.buildDir}/reports/checkstyle/main.xml"
            }
        }
    }

    checkstyleTest {
        reports {
            xml {
                destination "${project.buildDir}/reports/checkstyle/test.xml"
            }
        }
    }

    task checkstyleReport << {
        description = 'Applies XML stylesheet to generated checkstyle*.xml files.'
        if (file("$buildDir/reports/checkstyle/${ext.checkType}.xml").exists()) {
            ant.xslt(in: "$buildDir/reports/checkstyle/${ext.checkType}.xml",
                    style:"config/checkstyle/checkstyle-noframes-sorted.xsl",
                    out:"$buildDir/reports/checkstyle/checkstyle_${ext.checkType}.html"
            )
        }
    }

    task checkstyle(dependsOn:['checkstyleMain', 'checkstyleTest']) {
        description = 'Run checkstyle on all sourcesets.'
    }

    gradle.taskGraph.afterTask {Task task, TaskState state ->
        if(checkstyle.ignoreFailures || state.failure) {
            if (task.name in ['checkstyleMain', 'checkstyleTest']) {
                checkstyleReport {
                    def matcher = task.name =~ /^checkstyle(.*)$/
                    if (matcher.matches()) {
                        ext.checkType = matcher.group(1).toLowerCase()
                    }
                }
                checkstyleReport.execute()
            }
        }
    }

    // FindBugs
    // see docs at http://www.gradle.org/docs/current/dsl/org.gradle.api.plugins.quality.FindBugsExtension.html
    // and http://www.gradle.org/docs/current/userguide/findbugs_plugin.html
    apply plugin: 'findbugs'
    findbugs {
        toolVersion = "2.0.1"
        reportsDir = file("$project.buildDir/findbugsReports")
        effort = "max"
        reportLevel = "high"
        ignoreFailures = true
    }

    tasks.withType(FindBugs) {
        reports {
            // only one type of report may be enabled at a time
            xml.enabled = false
            html.enabled = true
        }
    }

    task findbugs(dependsOn:['findbugsMain', 'findbugsTest']) {
        description = 'Run findsbugs on all sourcesets.'
    }

    // PMD
    //apply plugin: 'pmd'
    //tasks.withType(Pmd) { reports.html.enabled true }

    //apply plugin: 'cobertura'
    //cobertura {
    //    sourceDirs = sourceSets.main.java.srcDirs
    //    format = 'html'
    //    includes = ['**/*.java', '**/*.groovy']
    //    excludes = []
    //}
}