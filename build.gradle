ext {
    githubProjectName = 'jVistA'
    versions = [
            javasimon: '3.3.0',
            slf4j: '1.7.1'
    ]
}

buildscript {
    repositories {
        mavenCentral()
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

apply from: file('gradle/convention.gradle')
apply from: file('gradle/check.gradle')
apply from: file('gradle/license.gradle')

repositories {
    mavenCentral()
}

dependencies {
    compile "org.slf4j:slf4j-api:$versions.slf4j",
            "org.slf4j:slf4j-simple:$versions.slf4j",
            'commons-configuration:commons-configuration:1.6',
            'org.apache.commons:commons-lang3:3.1'
    testCompile 'junit:junit:4.10',
            'com.google.code.gson:gson:2.2.2',
            "org.javasimon:javasimon-core:$versions.javasimon"
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
    
    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle(":" + descriptor)
    }
}

task itest(type: Test) {
    description = 'Runs integration tests (test classes ending in ITest).'
    include "**/*ITest*"
}
itest.dependsOn(cleanItest)

//http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html
test {    
    exclude "**/*ITest*"
    minHeapSize = "128m"
    maxHeapSize = "512m"
    jvmArgs '-XX:MaxPermSize=256m'
}

task listCache << {
    description = 'Prints all items in all Configurations (extends FileCollection), representing all artifacts and their dependencies.'
    configurations.compile.each { println it } 
}

task listJars << {
    description = 'Prints the JAR files from all Configurations.'
    configurations.compile.each { File file -> println file.name }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}
